{
	"info": {
		"_postman_id": "aefe9f70-3ae7-43c8-84f8-c48286516db3",
		"name": "Ardilla Retail Withdrawal Requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "34398491",
		"_collection_link": "https://api-team-4823.postman.co/workspace/API-Team-Workspace~bc05cd44-6354-4339-bf34-0ef433e72b5c/collection/34398491-aefe9f70-3ae7-43c8-84f8-c48286516db3?action=share&source=collection_link&creator=34398491"
	},
	"item": [
		{
			"name": "Withdrawal History",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Error is not present in the response\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.not.have.property('error');\r",
							"});\r",
							"pm.test(\"Response contains userId in the transaction history\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    var transactionHistory = responseData.data.transaction_history;\r",
							"    \r",
							"    transactionHistory.forEach((transaction) => {\r",
							"        pm.expect(transaction).to.have.property('user_id');\r",
							"    });\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"response time is more than 200\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.above(200)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbl9pZCI6IjgzMDQ1N2MwLTEzNTQtNGJmOC1hZTE1LTZjNjc1YmUzZDFkNiIsImlhdCI6MTczODMxNDQ3NSwiZXhwIjoxNzM4OTE5Mjc1fQ.CZmXe-vKVOFS9XKVHsEpQPU4rJDla4g89juvoGvaPso"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}ardilla/retail/admin/api/v1/withdrawal/request/history/successful/1/10"
			},
			"response": []
		},
		{
			"name": "Get All banks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the required fields - bankCode and bankName\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data.response.banks).to.be.an('array');\r",
							"    \r",
							"    responseData.data.response.banks.forEach(function(bank) {\r",
							"        pm.expect(bank).to.have.property('bankCode');\r",
							"        pm.expect(bank).to.have.property('bankName');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Bank code is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data.response.banks).to.be.an('array');\r",
							"    \r",
							"    responseData.data.response.banks.forEach(function(bank) {\r",
							"        pm.expect(bank.bankCode).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Bank code should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Bank name is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.data.response.banks).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
							"    responseData.data.response.banks.forEach(function (bank) {\r",
							"        pm.expect(bank.bankName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Bank name should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Banks array is present and contains expected number of elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data.response.banks).to.be.an('array');\r",
							"    pm.expect(responseData.data.response.banks.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is more than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.above(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbl9pZCI6IjgzMDQ1N2MwLTEzNTQtNGJmOC1hZTE1LTZjNjc1YmUzZDFkNiIsImlhdCI6MTczODMxNDQ3NSwiZXhwIjoxNzM4OTE5Mjc1fQ.CZmXe-vKVOFS9XKVHsEpQPU4rJDla4g89juvoGvaPso"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}ardilla/retail/admin/api/v1/withdrawal/request/banks"
			},
			"response": []
		},
		{
			"name": "Initiate withdrawal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if the response contains the userId field\r",
							"pm.test(\"Response contains the userId field\", function () {\r",
							"    pm.expect(pm.response.json().data).to.have.property('user_id');\r",
							"});\r",
							"//check if status code is 200\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"//check if response time is above 200ms\r",
							"pm.test(\"Response time is above 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
							"});\r",
							"\r",
							"// Check if the response contains the message field\r",
							"pm.test(\"Response contains the message field\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('message');\r",
							"});\r",
							"// Check if the response contains the status field\r",
							"pm.test(\"Response contains the status field\", function () {\r",
							"    pm.expect(pm.response.json().data).to.have.property('status');\r",
							"});\r",
							"// Check if the response contains the transaction_ref field\r",
							"pm.test(\"Response contains the transaction_ref field\", function () {\r",
							"    pm.expect(pm.response.json().data).to.have.property('transaction_ref');\r",
							"});\r",
							"// Check if the response body contains bank name, bank code, account name, and account number\r",
							"pm.test(\"Response contains bank name, bank code, account name, and account number fields\", function () {\r",
							"    var responseData = pm.response.json().data;\r",
							"    pm.expect(responseData).to.have.property('bank_code');\r",
							"    pm.expect(responseData).to.have.property('bank_name');\r",
							"    pm.expect(responseData).to.have.property('account_name');\r",
							"    pm.expect(responseData).to.have.property('account_number');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbl9pZCI6IjgzMDQ1N2MwLTEzNTQtNGJmOC1hZTE1LTZjNjc1YmUzZDFkNiIsImlhdCI6MTczODMxNDQ3NSwiZXhwIjoxNzM4OTE5Mjc1fQ.CZmXe-vKVOFS9XKVHsEpQPU4rJDla4g89juvoGvaPso"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"amount\" : 200,\r\n    \"kodhex\" : \"serenity\",\r\n    \"bank_code\": \"090267\",\r\n    \"account_number\": \"2003666559\",\r\n    \"bank_name\" : \"KUDA MICROFINANCE BANK\"\r\n  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}ardilla/retail/admin/api/v1/withdrawal/request/initiate"
			},
			"response": []
		},
		{
			"name": "Approve",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbl9pZCI6IjgzMDQ1N2MwLTEzNTQtNGJmOC1hZTE1LTZjNjc1YmUzZDFkNiIsImlhdCI6MTczODMxNDQ3NSwiZXhwIjoxNzM4OTE5Mjc1fQ.CZmXe-vKVOFS9XKVHsEpQPU4rJDla4g89juvoGvaPso"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}ardilla/retail/admin/api/v1/withdrawal/request/approve/234"
			},
			"response": []
		},
		{
			"name": "Search User by Kodhex/Phone",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phone\" : \"+2348136603427\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}ardilla/retail/admin/api/v1/withdrawal/request/search/user"
			},
			"response": []
		},
		{
			"name": "Decline",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbl9pZCI6IjgzMDQ1N2MwLTEzNTQtNGJmOC1hZTE1LTZjNjc1YmUzZDFkNiIsImlhdCI6MTczODMxNDQ3NSwiZXhwIjoxNzM4OTE5Mjc1fQ.CZmXe-vKVOFS9XKVHsEpQPU4rJDla4g89juvoGvaPso"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"reason\": \"no fund to pay\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}ardilla/retail/admin/api/v1/withdrawal/request/decline/234"
			},
			"response": []
		},
		{
			"name": "Resolve beneficiary bank account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to validate that the response contains the status field\r",
							"pm.test(\"Response contains the status field\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('data');\r",
							"    pm.expect(pm.response.json().data).to.have.property('status');\r",
							"});\r",
							"// Test to validate that the response contains the bank code, account name, and account number\r",
							"pm.test(\"Response contains bank code, account name, and account number\", function () {\r",
							"    var responseData = pm.response.json().data.response;\r",
							"\r",
							"    pm.expect(responseData).to.have.property('bankCode');\r",
							"    pm.expect(responseData).to.have.property('accountName');\r",
							"    pm.expect(responseData).to.have.property('accountNumber');\r",
							"});\r",
							"// Test to validate that the response contains the message field\r",
							"pm.test(\"Response contains the message field\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('message');\r",
							"});\r",
							"// Test to validate that the response body structure and values are valid\r",
							"pm.test(\"Response body structure is valid\", function () {\r",
							"    var responseData = pm.response.json().data.response;\r",
							"\r",
							"    pm.expect(pm.response.json()).to.have.property('data');\r",
							"    pm.expect(pm.response.json().data).to.have.property('status');\r",
							"    pm.expect(pm.response.json().data).to.have.property('response');\r",
							"    pm.expect(responseData).to.have.property('bankCode');\r",
							"    pm.expect(responseData).to.have.property('accountName');\r",
							"    pm.expect(responseData).to.have.property('accountNumber');\r",
							"    pm.expect(pm.response.json()).to.have.property('message');\r",
							"});\r",
							"// Test to validate that the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbl9pZCI6IjgzMDQ1N2MwLTEzNTQtNGJmOC1hZTE1LTZjNjc1YmUzZDFkNiIsImlhdCI6MTczODMxNDQ3NSwiZXhwIjoxNzM4OTE5Mjc1fQ.CZmXe-vKVOFS9XKVHsEpQPU4rJDla4g89juvoGvaPso"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \r\n    \"bank_code\": \"090267\",\r\n    \"account_number\": \"2003666559\"\r\n   \r\n  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}ardilla/retail/admin/api/v1/withdrawal/request/beneficiary_bank/resolve"
			},
			"response": []
		},
		{
			"name": "Providus withdrawal status",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbl9pZCI6IjgzMDQ1N2MwLTEzNTQtNGJmOC1hZTE1LTZjNjc1YmUzZDFkNiIsImlhdCI6MTczODMxNDQ3NSwiZXhwIjoxNzM4OTE5Mjc1fQ.CZmXe-vKVOFS9XKVHsEpQPU4rJDla4g89juvoGvaPso"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}ardilla/retail/admin/api/v1/withdrawal/request/providus/transaction_status/7e1049ac-c5a4-4936-832c-f705e0bfe61f"
			},
			"response": []
		},
		{
			"name": "Get successful withdrawal request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON = pm.response.json();\r",
							"\r",
							"// Test the response body structure and values\r",
							"pm.test(\"Response body structure is valid\", function () {\r",
							"    pm.expect(responseJSON).to.be.an('object').that.has.property('code');\r",
							"    pm.expect(responseJSON).to.have.property('responseCode');\r",
							"    pm.expect(responseJSON).to.have.property('status');\r",
							"    pm.expect(responseJSON).to.have.property('message');\r",
							"    pm.expect(responseJSON).to.have.property('data').to.be.an('object').that.has.property('values');\r",
							"    pm.expect(responseJSON.data.values).to.have.property('pageNumber');\r",
							"    pm.expect(responseJSON.data.values).to.have.property('pageSize');\r",
							"    pm.expect(responseJSON.data).to.have.property('transaction_history').that.is.an('array');\r",
							"});\r",
							"\r",
							"// Checking the data types and required properties in each transaction object\r",
							"pm.test(\"Each transaction object has valid properties and data types\", function () {\r",
							"    responseJSON.data.transaction_history.forEach((transaction) => {\r",
							"        pm.expect(transaction).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(transaction).to.have.property('user_id').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('amount').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('date_completed').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('date_created').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('date_last_updated').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('status').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('transaction_ref').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('initiated_by').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('completed_by_admin').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('bank_code').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('bank_name').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('account_name').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('account_number').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"// Test to validate the response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbl9pZCI6IjgzMDQ1N2MwLTEzNTQtNGJmOC1hZTE1LTZjNjc1YmUzZDFkNiIsImlhdCI6MTczODMxNDQ3NSwiZXhwIjoxNzM4OTE5Mjc1fQ.CZmXe-vKVOFS9XKVHsEpQPU4rJDla4g89juvoGvaPso"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}ardilla/retail/admin/api/v1/withdrawal/request/history/successful/1/10"
			},
			"response": []
		},
		{
			"name": "Get failed withdrawal request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJSON = pm.response.json();\r",
							"\r",
							"// Test the response body structure and values\r",
							"pm.test(\"Response body structure is valid\", function () {\r",
							"    pm.expect(responseJSON).to.be.an('object').that.has.property('code');\r",
							"    pm.expect(responseJSON).to.have.property('responseCode');\r",
							"    pm.expect(responseJSON).to.have.property('status');\r",
							"    pm.expect(responseJSON).to.have.property('message');\r",
							"    pm.expect(responseJSON).to.have.property('data').to.be.an('object').that.has.property('values');\r",
							"    pm.expect(responseJSON.data.values).to.have.property('pageNumber');\r",
							"    pm.expect(responseJSON.data.values).to.have.property('pageSize');\r",
							"    pm.expect(responseJSON.data).to.have.property('transaction_history').that.is.an('array');\r",
							"});\r",
							"\r",
							"// Checking the data types and required properties in each transaction object\r",
							"pm.test(\"Each transaction object has valid properties and data types\", function () {\r",
							"    responseJSON.data.transaction_history.forEach((transaction) => {\r",
							"        pm.expect(transaction).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(transaction).to.have.property('user_id').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('amount').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('date_completed').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('date_created').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('date_last_updated').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('status').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('transaction_ref').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('initiated_by').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('completed_by_admin').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('bank_code').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('bank_name').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('account_name').that.is.a('string');\r",
							"        pm.expect(transaction).to.have.property('account_number').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"});\r",
							"// Test to validate the response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbl9pZCI6IjgzMDQ1N2MwLTEzNTQtNGJmOC1hZTE1LTZjNjc1YmUzZDFkNiIsImlhdCI6MTczODMxNDQ3NSwiZXhwIjoxNzM4OTE5Mjc1fQ.CZmXe-vKVOFS9XKVHsEpQPU4rJDla4g89juvoGvaPso"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseurl}}ardilla/retail/admin/api/v1/withdrawal/request/history/failed/1/10"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseurl",
			"value": "https://ardilla-retail-admin.onrender.com/",
			"type": "default"
		}
	]
}